<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HiCity v0.4 记录</title>
    <url>/xjb%E5%86%99/HiCity-v0-4-%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>HiCity v0.4 是一个基于pyqt的城市码查询小工具，是我python课的第四次作业。这篇文章则是记录一下在编写这个程序时所遇到的问题和解决方法，以免再次落入同样的窘境之中。</p>
</blockquote>
<a id="more"></a>

<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>这个小窗口部件实现了从文件中读取城市代码、从数据库中读入城市代码，以及从文件中把城市代码写入到数据库中。当然，作业中要求要加入数据库的增删查改并没有实现。然而在了解了pyqt的大致使用方法之后，这种功能加起来也不是太难，于是便现在就将 HiCity v0.4 的开发流程记录下来了。</p>
<p>本篇文章将按照QWiget、QButton与信号与槽、QHBoxLayout/QVBoxLayout与窗口自适应、QTheard、pyqtSignal的顺序来记录如何写一个<strong>有进度条的</strong>、<strong>能自动补全的</strong>基于qt的小应用。</p>
<h1 id="HiCity-v0-4"><a href="#HiCity-v0-4" class="headerlink" title="HiCity v0.4"></a>HiCity v0.4</h1><p><img data-src="截屏2020-04-07-下午6.57.23.png" alt="截屏2020-04-07 下午6.57.23"><i class="img-caption">◎ 程序主界面</i></p>
<p>这个主界面非常的直白。但是不足的地方在于从文件进行的操作是在源码中写死了的。QT 支持点击一下按钮就调用一个取文件的操作。这个功能的实现会在后续更新。</p>
<p>写死的文件路径的写法也是有所讲究的。以前我喜欢直接把相对路径的字符串拍上去，但是由于我使用了一个大的文件夹专门写python，这种作业就会单独开一个小文件夹来方便管理。但是在如下文件结构中，往往需要加”homework/“前缀才能正常的访问搭配 <code>data.txt</code> 文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">|-- python</span><br><span class="line">    |-- others.py</span><br><span class="line">    |-- homework</span><br><span class="line">        |-- HiCity v0.1.py</span><br><span class="line">        |-- HiCity v0.2.py</span><br><span class="line">        |-- HiCity v0.3.py</span><br><span class="line">        |-- HiCity v0.4.py</span><br><span class="line">        |-- data.txt</span><br></pre></td></tr></table></figure>

<p>但是交作业的时候我们并不知道交上去的作业文件结构是什么样的，也不知道老师的python是在哪个路径下跑的。因此，我们可以通过 <code>os.path.join(os.path.dirname(__file__), &quot;data.txt&quot;)</code>来愉快的访问数据文件。因为你交上去的作业py文件和数据总是在一个文件夹下，所以这样就能避免许多路径上的问题。其中<code>os.path.dirname(__file__)</code>是返回当前文件的绝对路径，<code>os.path.join()</code>函数则是将文件路径连接起来。</p>
<p>下面就是一堆界面的截图。<img data-src="截屏2020-04-07-下午7.26.06.png" alt="截屏2020-04-07 下午7.26.06"><i class="img-caption">◎ 正在载入的样子</i><img data-src="截屏2020-04-07-下午7.26.13.png" alt="截屏2020-04-07 下午7.26.13"><i class="img-caption">◎ 载入完成的样子</i><img data-src="截屏2020-04-07-下午7.30.51.png" alt="截屏2020-04-07 下午7.30.51"><i class="img-caption">◎ 查询的样子</i></p>
<p>然后，就要开始记录这是怎么实现的了！</p>
<h2 id="QWiget"><a href="#QWiget" class="headerlink" title="QWiget"></a>QWiget</h2><p>QWiget就是一个窗口类。一个如下的代码能够直接输出一个窗口。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget,QApplication</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    app=QApplication(sys.argv)</span><br><span class="line">    win=QWidget()</span><br><span class="line">    win.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p><img data-src="截屏2020-04-07-下午7.41.11.png" alt="截屏2020-04-07 下午7.41.11"><i class="img-caption">◎ 大概长这样</i></p>
<p>当然我们的窗口自然不能什么都没有，所以我们常用的方法是继承<code>QWidget</code>类来添加我们想要的元素。那么借用一下<a href="https://pythonspot.com/pyqt5-window/" target="_blank" rel="noopener">官方的教程代码</a>我们就能给这个窗口添加我们想要的元素了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.title = <span class="string">"PyQt5 simple window - pythonspot.com"</span></span><br><span class="line">        self.left = <span class="number">10</span>  <span class="comment"># 这个类可以放很多元素进去。虽然这里放的都是设置窗口相关的元素，但是能放置的不一定非得是Qt相关的元素</span></span><br><span class="line">        self.top = <span class="number">10</span></span><br><span class="line">        self.width = <span class="number">640</span></span><br><span class="line">        self.height = <span class="number">480</span></span><br><span class="line">        self.initUI()  <span class="comment"># 把元素放到窗口上</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(self.title)  <span class="comment"># 设置标题</span></span><br><span class="line">        self.setGeometry(self.left, self.top, self.width, self.height)  <span class="comment"># 设置大小</span></span><br><span class="line">        self.show()  <span class="comment"># 放好之后展示窗口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = App()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p><img data-src="截屏2020-04-07-下午7.48.27.png" alt="截屏2020-04-07 下午7.48.27"><i class="img-caption">◎ 于是他有了预设大小以及一个标题</i></p>
<p>如果你要做一个按下按钮才弹出的窗口的话，注意不要在<code>setupUI()</code>函数中使用<code>self.show()</code>函数，否则这个窗口将在创建的时候就展示出来了。</p>
<h2 id="QButton与信号与槽"><a href="#QButton与信号与槽" class="headerlink" title="QButton与信号与槽"></a>QButton与信号与槽</h2><p>这一部分我将记录一下pyqt中，信号与槽。信号就如同字面意思的信号，例如按下按钮。而有信号发出就得有东西来接收信号。那么接受和处理信号的就由槽函数来完成。我们还是借用<a href="https://pythonspot.com/pyqt5-buttons/" target="_blank" rel="noopener">官方代码</a>来做示范。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> pyqtSlot</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span><span class="params">(QWidget)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.title = <span class="string">'PyQt5 button - pythonspot.com'</span></span><br><span class="line">        self.left = <span class="number">10</span></span><br><span class="line">        self.top = <span class="number">10</span></span><br><span class="line">        self.width = <span class="number">320</span></span><br><span class="line">        self.height = <span class="number">200</span></span><br><span class="line">        self.initUI()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(self.title)</span><br><span class="line">        self.setGeometry(self.left, self.top, self.width, self.height)</span><br><span class="line">        </span><br><span class="line">        button = QPushButton(<span class="string">'PyQt5 button'</span>, self) <span class="comment">#按钮创建</span></span><br><span class="line">        button.setToolTip(<span class="string">'This is an example button'</span>) <span class="comment">#创建悬浮提示</span></span><br><span class="line">        button.move(<span class="number">100</span>,<span class="number">70</span>) <span class="comment">#设置位置，不推荐这样用。后面会用到QHBoxLayout来做自适应</span></span><br><span class="line">        button.clicked.connect(self.on_click) <span class="comment">#重点！信号与槽函数相连了！</span></span><br><span class="line">        </span><br><span class="line">        self.show()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pyqtSlot()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_click</span><span class="params">(self)</span>:</span><span class="comment">#自定义的槽函数</span></span><br><span class="line">        print(<span class="string">'PyQt5 button click'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = App()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>

<p>这里我们主要关心的是这几行代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">button.clicked.connect(self.on_click)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pyqtSlot()#槽函数的装饰器，可以不用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_click</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'PyQt5 button click'</span>)</span><br></pre></td></tr></table></figure>

<p>第一行代码表示将点击完成的信号与<code>self.on_click()</code>函数相连接。这表示当按钮被点击之后，按钮发出的点击信号将被<code>self.on_click()</code>函数处理。而<code>@pyqtSlot()</code>装饰器则是将python函数转换为一个槽函数。然而QT允许任意函数作为槽函数被调用，所以可以不用这个装饰器，更多内容可以看<a href="https://stackoverflow.com/questions/45841843/function-of-pyqtslot" target="_blank" rel="noopener">这里</a>。</p>
<p>同时，如果你的命名格式是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PyQt5.QtCore.pyqtSlot(参数)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_</span>发送者对象名称<span class="title">_</span>发射信号名称<span class="params">(self, 参数)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>那么你可以使用这个函数来完成自动连接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">QMetaObject.connectSlotsByName(QObject)</span><br></pre></td></tr></table></figure>

<p>例如下面的写法是和上面的连接方法是等价的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.okButton = QPushButton(<span class="string">"OK"</span>, self)</span><br><span class="line"><span class="comment">#使用setObjectName设置对象名称</span></span><br><span class="line">self.okButton.setObjectName(<span class="string">"okButton"</span>)</span><br><span class="line"></span><br><span class="line">QtCore.QMetaObject.connectSlotsByName(self)</span><br><span class="line"></span><br><span class="line"><span class="meta">@QtCore.pyqtSlot()    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_okButton_clicked</span><span class="params">(self)</span>:</span></span><br><span class="line">        print( <span class="string">"单击了OK按钮"</span>)</span><br></pre></td></tr></table></figure>

<p>代码来自于<a href="https://blog.csdn.net/broadview2006/article/details/80132757?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">这里</a>。</p>
<h2 id="QHBoxLayout-QVBoxLayout与窗口自适应"><a href="#QHBoxLayout-QVBoxLayout与窗口自适应" class="headerlink" title="QHBoxLayout/QVBoxLayout与窗口自适应"></a>QHBoxLayout/QVBoxLayout与窗口自适应</h2><p>这两个组件主要用来做窗口自适应的。相较于Designer模式，这种代码控制自适应的方式虽然说不够直观，但是却能够精确的把元素放到你想放置的地方。当然除了这两个能够做自适应之外，还有其他的表单式布局和栅格式布局。关于这两种布局可以看<a href="https://zhuanlan.zhihu.com/p/28559136" target="_blank" rel="noopener">这里</a>。</p>
<p>我们把HiCity布局部分的代码搬过来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">    QToolTip.setFont(QFont(<span class="string">"SansSerif"</span>, <span class="number">10</span>))</span><br><span class="line">    self.t = test()</span><br><span class="line">    self.t.fin.connect(self.init_cobo)</span><br><span class="line"></span><br><span class="line">    self.setToolTip(<span class="string">"This is a &lt;b&gt;QWidget&lt;/b&gt; widget"</span>)</span><br><span class="line"></span><br><span class="line">    self.btn = QPushButton(<span class="string">"从文件中读取"</span>, self)</span><br><span class="line">    self.btn.clicked.connect(self.t.reactFL)</span><br><span class="line">    self.btn1 = QPushButton(<span class="string">"从数据库中读取"</span>, self)</span><br><span class="line">    self.btn1.clicked.connect(self.t.reactDB)</span><br><span class="line">    self.btn2 = QPushButton(<span class="string">"从文件中写入到数据库"</span>, self)</span><br><span class="line">    self.btn2.clicked.connect(self.t.reactCP)</span><br><span class="line">    self.tit = QLabel(<span class="string">"欢迎使用 HiCity v0.4"</span>, self)</span><br><span class="line"></span><br><span class="line">    self.line = QLabel(<span class="string">'请输入要查询的城市。'</span>,self)</span><br><span class="line">    self.cobo = QComboBox(self)</span><br><span class="line">    self.cobo.setEditable(<span class="literal">True</span>)</span><br><span class="line">    self.cobo.activated.connect(self.qcity)</span><br><span class="line"></span><br><span class="line">    hbox_v=QHBoxLayout()</span><br><span class="line">    hbox_v.addStretch(<span class="number">1</span>)</span><br><span class="line">    hbox_v.addWidget(self.cobo)</span><br><span class="line">    hbox_v.addStretch(<span class="number">1</span>)</span><br><span class="line">    hbox_v.addWidget(self.line)</span><br><span class="line">    hbox_v.addStretch(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    hbox_btn = QHBoxLayout()</span><br><span class="line">    hbox_btn.addStretch(<span class="number">1</span>)</span><br><span class="line">    hbox_btn.addWidget(self.btn)</span><br><span class="line">    hbox_btn.addWidget(self.btn1)</span><br><span class="line">    hbox_btn.addStretch(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    hbox = QHBoxLayout()</span><br><span class="line">    hbox.addStretch(<span class="number">1</span>)</span><br><span class="line">    hbox.addWidget(self.tit)</span><br><span class="line">    hbox.addStretch(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    vbox_tit = QVBoxLayout()</span><br><span class="line">    vbox_tit.addLayout(hbox)</span><br><span class="line">    vbox_tit.addLayout(hbox_btn)</span><br><span class="line">    vbox_tit.addWidget(self.btn2)</span><br><span class="line">    vbox_tit.addStretch(<span class="number">1</span>)</span><br><span class="line">    vbox_tit.addLayout(hbox_v)</span><br><span class="line">    vbox_tit.addStretch(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    hbox_tit = QHBoxLayout()</span><br><span class="line">    hbox_tit.addStretch(<span class="number">1</span>)</span><br><span class="line">    hbox_tit.addLayout(vbox_tit)</span><br><span class="line">    hbox_tit.addStretch(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    self.setLayout(hbox_tit)</span><br></pre></td></tr></table></figure>



<p>可以看到代码非常的长（大雾）。我们其实只用看一段就明白了QHBoxLayout和QVBoxLayout怎么用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hbox_v=QHBoxLayout()</span><br><span class="line">hbox_v.addStretch(<span class="number">1</span>)</span><br><span class="line">hbox_v.addWidget(self.cobo)</span><br><span class="line">hbox_v.addStretch(<span class="number">1</span>)</span><br><span class="line">hbox_v.addWidget(self.line)</span><br><span class="line">hbox_v.addStretch(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>这一段代码中，<code>hbox</code>表示我们创建了一个水平的box。他的<code>addStretch</code>方法则表示增加一个拉伸因子。<code>addWidget</code>表示我们增加一个组件进去。这个拉伸因子是干嘛的呢？他是用来控制组件之间的间隙比例的。按照顺序加入则表示从左到右的元素是什么，而这些元素之间的间距比例又是多少。<img data-src="截屏2020-04-12-下午3.29.51" alt="截屏2020-04-07 下午6.57.23"><i class="img-caption">◎ 把我们的主页面拉大一点</i></p>
<p>这里对比下面的代码则可以看出，cobo条上下的距离是1:2的关系。这与我们代码中的设计是一致的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vbox_tit = QVBoxLayout()</span><br><span class="line">vbox_tit.addLayout(hbox)</span><br><span class="line">vbox_tit.addLayout(hbox_btn)</span><br><span class="line">vbox_tit.addWidget(self.btn2)</span><br><span class="line">vbox_tit.addStretch(<span class="number">1</span>)</span><br><span class="line">vbox_tit.addLayout(hbox_v)</span><br><span class="line">vbox_tit.addStretch(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<p>同时，作为一种布局，布局本身也能被插入到另外一个布局中。这样就能支撑我们作出更加符合我们心目中的自适应布局了。</p>
<p>比如说如果我们直接把所有元素扔进一个QVBoxLayout里面，那么就无法做到两个按钮并排摆放并与其他元素一起位于窗口居中的效果了。那么在这个项目中，我的做法是把两个button放到一个HBox中，然后将这个Box与其他元素一起放入VBox中，这样就能通过做外层的VBox控制元素的垂直排布方式，再在外面嵌套一个HBox来做居中。</p>
<p>这是用来做按钮并列的水平HBox，居中样式！   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hbox_btn = QHBoxLayout()</span><br><span class="line">   hbox_btn.addStretch(<span class="number">1</span>)</span><br><span class="line">   hbox_btn.addWidget(self.btn)</span><br><span class="line">   hbox_btn.addWidget(self.btn1)</span><br><span class="line">   hbox_btn.addStretch(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>用来做整体垂直分布控制的VBox</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vbox_tit = QVBoxLayout()</span><br><span class="line">vbox_tit.addLayout(hbox)</span><br><span class="line">vbox_tit.addLayout(hbox_btn)</span><br><span class="line">vbox_tit.addWidget(self.btn2)</span><br><span class="line">vbox_tit.addStretch(<span class="number">1</span>)</span><br><span class="line">vbox_tit.addLayout(hbox_v)</span><br><span class="line">vbox_tit.addStretch(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>用来做整体居中的HBox。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hbox_tit = QHBoxLayout()</span><br><span class="line">hbox_tit.addStretch(<span class="number">1</span>)</span><br><span class="line">hbox_tit.addLayout(vbox_tit)</span><br><span class="line">hbox_tit.addStretch(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>这大概就是两个Box的简单应用了。</p>
<h2 id="QTheard"><a href="#QTheard" class="headerlink" title="QTheard"></a>QTheard</h2><p>这是PyQt中的多线程。由于我对多线程还不是很了解，所以这个部分就大致介绍一下我是怎么用这玩意的。我们使用一下<code>thread1=QThread()</code>就成功创建了一个线程。但是这个时候他还没有启动。调用<code>thread1.start()</code>，他就会自动调用自身的<code>run</code>方法。而我这里的做法就是继承这个类，并重载他的<code>run</code>方法，就能实现自己多线程读数据并显示进度条的功能了。这里有些人可能就会问，为什么进度条一定要用多线程呢？因为如果单纯的跑单线程的话，这个界面就会在读文件的时候卡死，所以必须要用多线程以及发信号的方式完成进度条的实现。当然我也尝试过使用async的方法，但是怎么搞都没有成功，索性放弃了。</p>
<p>我们把QTheard的读文件的方法弄过来看看。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(self.path, <span class="string">"r"</span>) <span class="keyword">as</span> fl:</span><br><span class="line">    cnt = <span class="number">1</span></span><br><span class="line">    lines = fl.readlines()</span><br><span class="line">    lines = [i <span class="keyword">for</span> i <span class="keyword">in</span> lines <span class="keyword">if</span> i != <span class="string">"\n"</span>]</span><br><span class="line">    self.trigger1.emit(len(lines))</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        line = line.strip(<span class="string">"\n"</span>).split(<span class="string">","</span>)</span><br><span class="line">        self.ans[line[<span class="number">0</span>]] = line[<span class="number">1</span>]</span><br><span class="line">        self.trigger.emit(cnt)</span><br><span class="line">        self.trigger2.emit(<span class="string">f"正在读取：<span class="subst">&#123;line[<span class="number">0</span>]&#125;</span>"</span>)</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">    self.trigger2.emit(<span class="string">"读取完成！"</span>)</span><br></pre></td></tr></table></figure>



<h1 id="我去打MHW了！剩下的等等再更！"><a href="#我去打MHW了！剩下的等等再更！" class="headerlink" title="我去打MHW了！剩下的等等再更！"></a>我去打MHW了！剩下的等等再更！</h1>]]></content>
      <categories>
        <category>xjb写</category>
      </categories>
      <tags>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>动森Q群机器人的 To-DO list！</title>
    <url>/xjb%E5%86%99/%E5%8A%A8%E6%A3%AEQ%E7%BE%A4%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84-To-DO-list%EF%BC%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>正如其名，我想要搞的功能！包括我特别想搞的和我想搞但是想摸的。</p>
</blockquote>
<a id="more"></a>

<h2 id="重要功能"><a href="#重要功能" class="headerlink" title="重要功能"></a>重要功能</h2><ul>
<li><p>大头菜上市功能</p>
<ul>
<li><p>已完成</p>
<p>  增删查改大头菜的价格</p>
</li>
<li><p>未完成</p>
<p>  发布大头菜价格到群里</p>
<blockquote>
<p>待定使用方法：<code>大头菜 -s</code></p>
</blockquote>
<p>  隐藏大头菜价格：该功能将使你的大头菜价格不再显示在 <code>大头菜 -l</code> 命令中，这个功能用于你不想别人看到你的大头菜价格，但是又不想删掉这个价格。设置完成后将不影响<strong>发布大头菜</strong>功能。</p>
</li>
</ul>
</li>
<li><p>上岛功能（待实现）</p>
<p>  增加上岛成员：该功能将添加想上岛的成员，方便批发房间密码。</p>
<blockquote>
<p>待定使用方法：<code>岛 -a {QQ号}</code></p>
</blockquote>
<p>  批发上岛密码：该功能顾名思义，将批发上岛的密码到上岛的人中。</p>
<blockquote>
<p>待定使用方法：<code>岛 -p</code></p>
</blockquote>
<p>  删除上岛成员：该功能将删除上岛成员。</p>
<p>  貌似强制付费的和下架的歌就算有歌曲id也放不了啊，淦。</p>
  
    <div id="aplayer-CsFDhCvB" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="30251429" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>





</li>
</ul>
]]></content>
      <categories>
        <category>xjb写</category>
      </categories>
      <tags>
        <tag>To-Do</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我们要诚信？</title>
    <url>/%E6%B5%81%E6%B0%B4%E8%B4%A6/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E8%A6%81%E8%AF%9A%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>最近看了罗老师的<a href="https://www.bilibili.com/video/av95872350" target="_blank" rel="noopener">关于诚信的讨论</a>，这让我又不由的又开始思考起道德的观念。罗老师在视频中讨论了两种不同的道德观，一种是道德主义。这种主义认为我们诚信是因为我们认为诚信是好的，诚信是值得我们去遵守的，因此我们守诚信。第二种道德观则是认为我们遵守诚信是因为我们我们认为诚信可以为我们带来好处。就算目前不能带来好处，甚至是会让我们吃亏，但是从长远的角度来看则是会带来可观的收益。这种思想也被称作功力主义。</p>
<a id="more"></a>

<p>但是对于这两种看法，罗老师认为他们都有自己的短板。</p>
<p>首先功力主义的结论是不稳定的，譬如说这个长远的角度又是多久呢？一个生动的例子便是张三开了家店，但是他遵从功利主义，认为诚信是可以带来收益的，而他设定这个长远为3年。结果他亏了三年。隔壁李四天天卖假货，但是赚得盆满钵满。但是他坚信诚信是会带来收益的，于是他又坚持了一年。结果又亏了一年。</p>
<p>而道德主义又过于教条。当二战时期一位纳粹军官询问一个老太太是否藏匿犹太人的时候，这位老太太若是完全遵守道德主义，那么她也不应该撒谎隐瞒自己藏匿犹太人的事实。因为撒谎是不诚信的体现。由此人们又延伸出了一种叫顾左右而言他的行为来规避撒谎。这种例子数不胜数，在日常生活中并不少见。譬如我小时候到表叔家去玩，打了一下午魂斗罗，然后临走的时候抓起来一本《读者》<del>这书小时候超火的，但是我还是觉得意林好看因为他每一期都有心理测试</del>，看了两分钟。这样，当我回到家我妈问我在表叔家打游戏没有，我就能理直气壮的说我去看书去了。但是，这种行为感觉又给人伪善、虚伪的感觉。</p>
<h1 id="柏拉图的调和论"><a href="#柏拉图的调和论" class="headerlink" title="柏拉图的调和论"></a>柏拉图的调和论</h1><p>柏拉图的调和论中，道德主义和功利主义是可以融合起来的。但是怎么融合的，爷忘了。</p>
<h1 id="故事又能怎么讲呢？"><a href="#故事又能怎么讲呢？" class="headerlink" title="故事又能怎么讲呢？"></a>故事又能怎么讲呢？</h1><h2 id="矛盾的故事"><a href="#矛盾的故事" class="headerlink" title="矛盾的故事"></a>矛盾的故事</h2><p>讲述好一个故事，往往是有矛盾，有冲突，这样才精彩，才抓人眼球，有看下去的欲望。譬如在爱情喜剧中，女主和男主总是会有一些戏剧性的冲突，故事发展才自然而又有趣。比如明明是分时段混浴的温泉偏偏有一方看错了时间，结果在温泉中相遇。<del>又或者看到某宁宁在图书馆0712。</del>而看到罗老师关于道德的讨论之后，特别是在他说明我们所处的社会是有多元道德观的时候，我就在想，这种多元的道德观是否能够激发出矛盾，从而构成一个故事的主体呢？</p>
<p>这让我立马想到的例子就是果宝特工<del>淦，为什么会是这个</del>。当主角花了几十集的时间终于要揭开大boss的真面目之后，结果发现大boss其实是一个基建狂魔，希望让人民住上更好的屋子而不惜强制拆迁。这就是这个故事模型的一个实例。boss的目的时候希望大家的生活更美好，这是道德的。而采取的手段是强制拆迁，这是不道德的。而主角只看到了boss的不道德而没有看到了boss的道德，这就产生了矛盾。而这个矛盾也足以推动故事讲下去，也能解释为什么主角团希望打到boss。因为主角只看到了boss拆迁而没有看到boss重建。</p>
<p>但是这种故事若是让人觉得boss的手段代价过于庞大，难免也会产生一种强行洗白的感觉。</p>
<h2 id="实验的故事"><a href="#实验的故事" class="headerlink" title="实验的故事"></a>实验的故事</h2><p>而另外一种故事则是可以去探讨关于人们心中的道德，到底是什么构成了它们。而从中拿掉或是增加什么来实验性的探讨道德观念也不失为一种讲故事的方法。</p>
<p>譬如爱情，两人互相喜欢这叫做爱情。那么两人见不着面，能叫爱情吗？这在生活中也是比较常见的，而作为故事主线讲似乎又有些薄弱。那么两人结婚了，向爱情中增添了婚姻的要素，能叫爱情吗？这又更进了一步，没有足够的经验怕也是难以讲出令人信服的故事。那么有第三人相恋了，这又叫爱情吗？在破坏一人感情的基础上成全两人的感情是否又是真正的爱情，是否又是真正的道德呢？这又是一类作品。那我们玄幻一点，两人中的其中一方是能活千年的老王八，而另一方只是一个普普通通的人类，这种不能陪伴到老的爱情，他还是爱情吗？那我们更近一步，换了身体但是精神不变的人还是爱情吗？就如同汤浅政明的《海马》一样，里面的人和思维是可以干干净净的分离的，那换了几十套肉体之后的人，你是会和那个肉体恋爱还是那个精神呢？又如同《魔女的夜宴》中，另一条时间线上的你是否又ntr了你自己呢？</p>
<p>这种实验性的，往人们观念中增减东西来实验这种观念好会不会变质亦是一种讲故事的思路。但是往往需要足够多的历经才能讲出优秀的故事，否则便很容易落入无病呻吟的漩涡。当然这种故事也是相当精彩的，因为一千个读者便有一千个哈姆雷特，每个人心中都有自己的观念，而看这种作品也会让人思考，你心中的观念又是什么样的，你是否又认为作品中主角的行为符合你的期望？</p>
]]></content>
      <categories>
        <category>流水账</category>
      </categories>
      <tags>
        <tag>胡思乱想</tag>
        <tag>故事构思</tag>
      </tags>
  </entry>
  <entry>
    <title>//Building in progress GHS记录</title>
    <url>/ghs/%E6%9C%AC%E5%AD%90%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote>
<p>GHS 是人类进步的基础。  @ Pzzzzz <em>2020.3.17</em></p>
</blockquote>
<h1 id="GHS！GHS！"><a href="#GHS！GHS！" class="headerlink" title="GHS！GHS！"></a>GHS！GHS！</h1><p>呼，总算是完成了首页隐藏文章的操作，但是离我心目中的神隐还是有不少差距的，而且目测文章下面的下一篇文章还是会暴露出GHS的文章。不过，目前技术力不够，更多神隐的操作还是难以搞出来。按照惯例，我搞出来的链接还是会放在文章最后，那么，话不多说，直接开搞！</p>
<h1 id="本"><a href="#本" class="headerlink" title="本"></a>本</h1><p>疫情在家期间，难免无所事事。但是看了许多本子之后，果然还是觉得大塚まひろ老师画得最好看。某粉红色的软件上关于这位老师的作品，u1s1，我全都喜欢。剧情大部分都是纯爱，蛮甜的。大姐头那一系列去掉hs能上动漫之家都没问题。唯一的一部双男主的本子也画了两条线，可谓是诚意满满。画风方面，就我目前的看来，说是我心中的第一也不为过。</p>
<p><img data-src="img-1.jpg" alt="某个本子的封面"><i class="img-caption">◎ 随意找了一个本子的封面</i></p>
]]></content>
      <categories>
        <category>ghs</category>
      </categories>
      <tags>
        <tag>ghs</tag>
      </tags>
  </entry>
  <entry>
    <title>折腾博客小结</title>
    <url>/%E9%9A%8F%E7%AC%94/%E5%BB%BA%E7%AB%99/%E6%8A%98%E8%85%BE%E5%8D%9A%E5%AE%A2%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="搭！搭tmd！"><a href="#搭！搭tmd！" class="headerlink" title="搭！搭tmd！"></a>搭！搭tmd！</h1><p>老早就想建个博客站了，无奈之前国内的服务器域名要备案国外的vps也不稳。拿个架酸酸乳的vps他配置又不行，装个最新版的wordpress都直呼亚历山大。还好无意之中发现github居然提供静态的网页托管服务，遂爬了一堆教程，终于搭上了博客。</p>
<a id="more"></a>

<p>现在网站logo还是用的还是默认的，毕竟懒得找icon了<del>还不是因为懒</del>。但是起码有头像有音乐了！取名为阁楼呢是因为我觉得阁楼就是一个放一些乱七八糟的东西的地方，虽然东西很杂，但是正是因为杂，就可以在里面玩得很开心。<del>侧边栏的音乐用的是apple music，没开的话一首歌只能听30秒就算开了你也只能听30秒，因为你不可能登得上的，而且还影响网站加载速度。那这里你可能就要问了，为什么我还要挂apple music呢，一是因为我觉得好看，二是我想放的音乐<strong>网易云他没版权，生成不了外链！</strong>综上，我就放了个apple music在那里</del>。网站已经换成强大的 aplayer 了！但是只支持电脑端访问。毕竟只有电脑端才有侧边栏。</p>
<h1 id="怎么搭呢？"><a href="#怎么搭呢？" class="headerlink" title="怎么搭呢？"></a>怎么搭呢？</h1><p>本博客基于hexo+github page，用了NexT主题，配置还算方便。就算你像我一样对前端一点不懂，也能搭出来能用，看起来还说得过去的博客。如果你啥也不会，那么点击<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">这里</a>。这位dalao讲得非常详细了。</p>
<p>如果你想要美观一点的话，可以尝试使用NexT主题。但是注意要安装最新的NexT主题，之前老的NexT已经不维护了。同时配置的话可以参考这位大大的教程<a href="https://guanqr.com/tech/website/hexo-theme-next-customization/" target="_blank" rel="noopener">链接在这里</a>。这篇教程可以说是讲得非常详细了，而且越算是比较新的教程了。因为在配置主题的时候搜到的许多教程的配置方式还是老的配置方式，最明显的区别就是自定义样式的时候，新版的NexT是在根目录source文件夹下的_data_文件夹里面放上你的自定义的各种乱七八糟的东西，同时要在NexT主题的配置文件中启用你的自定义文件，大概长这样。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件位置 ~/themes/next/_config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">postBodyEnd:</span> <span class="string">source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="attr">bodyEnd:</span> <span class="string">source/_data/body-end.swig</span></span><br><span class="line">  <span class="attr">head:</span> <span class="string">source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>大概就是这样，我也会在文末放置一些dalao的教程，当然官方文档也是最最需要看的。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>拉拉杂杂写了一大堆，但是这个博客还是有很多能改进的地方，姑且就在这里列出来吧。</p>
<ul>
<li><del>能有什么操作能隐藏文章和访问隐藏文章</del>勉强算是有了吧</li>
<li>侧边栏的黑色搞成彩色（其实也可以不搞</li>
<li>找一个网站logo</li>
<li>给网站整个背景</li>
<li>貌似没了</li>
</ul>
<p>不过这些功能目前来说都是可有可无的，等我哪天心情好了可能就有了吧。</p>
<p>好了，现在这个博客已经基本上能看了，最后放一张大一的时候去吃夜市拍的一张图收尾吧，顺便测试一下图片插入有没有问题。</p>
<p> <img data-src="IMG_0800.jpeg" alt="IMG_0800.heic"width="651"><i class="img-caption">◎ 结果用了一种极其tricky的方法才达成这样的效果。。</i></p>
<h1 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h1><ul>
<li><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></li>
<li><a href="https://guanqr.com/tech/website/hexo-theme-next-customization/" target="_blank" rel="noopener">Hexo-NexT 主题个性优化</a></li>
<li><a href="https://io-oi.me/tech/hexo-next-optimization" target="_blank" rel="noopener">打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化 | reuixiy</a></li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
        <category>建站</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>万丈高楼从地起</title>
    <url>/%E9%9A%8F%E7%AC%94/%E4%B8%87%E4%B8%88%E9%AB%98%E6%A5%BC%E4%BB%8E%E5%9C%B0%E8%B5%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="试试正文使用大标题"><a href="#试试正文使用大标题" class="headerlink" title="试试正文使用大标题"></a>试试正文使用大标题</h1><p>然后，尝试部署一下。</p>
<p>这大概是真正意义上的第一篇博客吧。</p>
<p>外观非常简陋（毕竟就套了个默认next主题），但是也算是终于搭上博客了。我会尝试写一些乱七八糟的东西放上去的。</p>
<p>大概，就是这样吧。。。</p>
<p>貌似，渲染出来很难看？<del>到时候再改吧，今天就先摸了</del></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
